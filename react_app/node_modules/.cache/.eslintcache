[{"/Users/Siddharth/sources/playland/auto-diff/react_app/src/index.js":"1","/Users/Siddharth/sources/playland/auto-diff/react_app/src/App.js":"2","/Users/Siddharth/sources/playland/auto-diff/react_app/src/reportWebVitals.js":"3"},{"size":535,"mtime":1691196124120,"results":"4","hashOfConfig":"5"},{"size":5693,"mtime":1691201004420,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1691165574528,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"d321vf",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Siddharth/sources/playland/auto-diff/react_app/src/index.js",[],[],"/Users/Siddharth/sources/playland/auto-diff/react_app/src/App.js",["18"],[],"import './App.css';\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n  const [variables, setVars] = useState(\"\");\n  const [values, setVals] = useState(\"\");\n  const [func, setFunc] = useState(\"\");\n  const [selectedInput, setSelectedInput] = useState(\"VariableInput\"); \n  const [funcOut, setFuncOut] = useState(\"\");\n  const [partOut, setPartOut] = useState(\"\");\n\n  const handleInputSelect = (inputType) => {\n    setSelectedInput(inputType);\n  };\n\n  const handleCalculateClick = () => {\n    if (variables.length === 0){\n      return;\n    }\n    if (values.length === 0){\n      return;\n    }\n    if (func.length === 0){\n      return;\n    }\n    let function_str = \"\";\n    let visited_indices = [];\n\n    for (let i = 0; i < func.length; i++) {\n      let element = func[i];\n\n      if (visited_indices.includes(i)) {\n        continue;\n      }\n\n      if (element === \"^\") {\n        function_str += \"**\";\n      } \n      else if (!isNaN(element)) {\n        let total_num = element;\n\n        for (let j = i + 1; j < func.length; j++) {\n          visited_indices.push(j);\n\n          if (!isNaN(func[j])) {\n            total_num += func[j];\n          } else {\n            visited_indices.pop();\n            break;\n          }\n        }\n\n        function_str += `Constant(${total_num})`;\n      }\n      else {\n        function_str += element;\n      }\n    }\n  \n    const formData = new FormData();\n    formData.append('variables', variables);\n    formData.append('eval_values', values);\n    formData.append('function', function_str);\n    \n    fetch(\"http://localhost:8000/\", {\n      method: \"POST\",\n      body: formData,\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setFuncOut(data.forward);\n        setPartOut(data.partials);\n      })\n  }\n\n  const handleButtonClick = (value) => {\n    if (selectedInput === \"VariableInput\") {\n      if (variables.length === 0){\n        setVars(value);\n      }\n      else{\n        setVars(variables + \", \" + value);\n      }\n    } \n    else if (selectedInput === \"ValueInput\") {\n      if (values.length === 0){\n        setVals(value);\n      }\n      else{\n        setVals(values + \", \" + value);\n      }\n    } \n    else if (selectedInput === \"FunctionInput\") {\n      setFunc(func + value);\n    }\n  };\n\n  const handleClearClick = () => {\n    setFunc(\"\");\n    setVals(\"\");\n    setVars(\"\");\n    setFuncOut(\"\");\n    setPartOut(\"\");\n  };\n\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      const key = event.key;\n      if (key === \"Backspace\"){\n        if (selectedInput === \"VariableInput\"){\n          setVars(variables.slice(0, -3));\n        }\n        else if (selectedInput === \"ValueInput\"){\n          setVals(values.slice(0, -3));\n        }\n        else{\n          setFunc(func.slice(0, -1));\n        }\n      }\n      else if (key === \"Shift\"){\n        \n      }\n      else{\n        handleButtonClick(key);\n      }\n    };\n  \n    window.addEventListener('keydown', handleKeyDown);\n  \n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedInput, variables, values, func, handleButtonClick]);\n\n  const importNumbers = () => {\n    const numbers = [];\n    for (let i = 0; i < 10; i++) {\n      numbers.push(<button onClick={() => handleButtonClick(i.toString())} key={i}>{i}</button>);\n    }\n    return numbers;\n  }\n\n  const importVariables = () => {\n    const variables = [];\n    for (let i = 97; i < 123; i++) {\n      variables.push(<button onClick={() => handleButtonClick(String.fromCharCode(i))} key={i}>{String.fromCharCode(i)}</button>);\n    }\n    for (let i = 65; i < 91; i++) {\n      variables.push(<button onClick={() => handleButtonClick(String.fromCharCode(i))} key={i}>{String.fromCharCode(i)}</button>);\n    }\n    return variables;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className='userEntries'>\n        <div className='VariableInput' onClick={() => handleInputSelect(\"VariableInput\")}>\n          {variables || \"Enter Variables\"}\n        </div>\n        <div className='ValueInput' onClick={() => handleInputSelect(\"ValueInput\")}>\n          {values || \"Enter Values To Evaluate At\"}\n        </div>\n        <div className='FunctionInput' onClick={() => handleInputSelect(\"FunctionInput\")}>\n          {func || \"Enter Function\"}\n        </div>\n      </div>\n  \n      <div className=\"Keypad\">\n        <div className=\"Operators\">\n          <button onClick={() => handleButtonClick('Log')}>Log</button>\n          <button onClick={() => handleButtonClick('Sin')}>Sin</button>\n          <button onClick={() => handleButtonClick('Cos')}>Cos</button>\n          <button onClick={() => handleButtonClick('+')}>+</button>\n          <button onClick={() => handleButtonClick('-')}>-</button>\n          <button onClick={() => handleButtonClick('/')}>/</button>\n          <button onClick={() => handleButtonClick('*')}>*</button>\n          <button onClick={() => handleButtonClick('^')}>^</button>\n          <button onClick={() => handleButtonClick('(')}>(</button>\n          <button onClick={() => handleButtonClick(')')}>)</button>\n        </div>\n        <div className=\"Numbers\">\n          {importNumbers()}\n        </div>\n        <div className=\"Variables\">\n          {importVariables()}\n        </div>\n        <div className=\"calculate\">\n          <button onClick={handleCalculateClick}>Calculate</button>\n          <button onClick={handleClearClick}>Clear</button>\n        </div>\n      </div>\n\n      <div className='Outputs'>\n        <div className='FuncOut'>\n          {funcOut || \"Function Output\"}\n        </div>\n        <div className='PartOut'>\n          {partOut || \"Partial Derivatives\"}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/Siddharth/sources/playland/auto-diff/react_app/src/reportWebVitals.js",[],[],{"ruleId":"19","severity":1,"message":"20","line":76,"column":9,"nodeType":"21","endLine":96,"endColumn":4,"suggestions":"22"},"react-hooks/exhaustive-deps","The 'handleButtonClick' function makes the dependencies of useEffect Hook (at line 133) change on every render. To fix this, wrap the definition of 'handleButtonClick' in its own useCallback() Hook.","VariableDeclarator",["23"],{"desc":"24","fix":"25"},"Wrap the definition of 'handleButtonClick' in its own useCallback() Hook.",{"range":"26","text":"27"},[1802,2263],"useCallback((value) => {\n    if (selectedInput === \"VariableInput\") {\n      if (variables.length === 0){\n        setVars(value);\n      }\n      else{\n        setVars(variables + \", \" + value);\n      }\n    } \n    else if (selectedInput === \"ValueInput\") {\n      if (values.length === 0){\n        setVals(value);\n      }\n      else{\n        setVals(values + \", \" + value);\n      }\n    } \n    else if (selectedInput === \"FunctionInput\") {\n      setFunc(func + value);\n    }\n  })"]